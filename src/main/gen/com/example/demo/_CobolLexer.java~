/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.example.demo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.NEW_LINE_INDENT;
import static com.example.demo.psi.CobolTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CobolLexer.flex</tt>
 */
public class _CobolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PIC_TYPE = 2;
  public static final int DISPLAY_TYPE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\3\1\22\0\1\21\6\0\1\42\1\37\1\40\3\0\1\31\1\3\1\0\11\5\1\43"+
    "\3\0\1\41\3\0\1\17\1\36\1\16\1\11\1\12\1\15\1\27\1\6\1\10\1\6\1\33\1\34\1"+
    "\30\1\13\1\20\1\24\1\6\1\25\1\23\1\14\1\26\1\22\1\32\1\6\1\35\1\6\4\0\1\7"+
    "\1\0\32\6\12\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\13\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\2\1\3\14\5"+
    "\1\15\1\14\7\5\1\16\2\5\1\17\5\5\1\20"+
    "\2\5\1\21\7\5\1\0\1\5\1\22\3\5\1\23"+
    "\3\5\1\0\6\5\1\24\1\0\1\25\1\26\4\5"+
    "\1\0\4\5\1\0\4\5\2\0\1\27\2\5\2\0"+
    "\2\5\2\0\2\5\1\30\1\0\2\5\1\0\1\5"+
    "\2\0\1\5\7\0\1\31\11\0\1\32\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\u0288\0\u02ac\0\u02d0\0\154\0\u02f4\0\u0318\0\u033c\0\u0360"+
    "\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480"+
    "\0\374\0\154\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558"+
    "\0\u057c\0\374\0\u05a0\0\u05c4\0\374\0\u05e8\0\u060c\0\u0630"+
    "\0\u0654\0\u0678\0\374\0\u069c\0\u06c0\0\374\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\374"+
    "\0\u0828\0\u084c\0\u0870\0\374\0\u0894\0\u08b8\0\u08dc\0\u0900"+
    "\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\374\0\u09fc"+
    "\0\374\0\374\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\374\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0"+
    "\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\154\0\u0dc8\0\u0dec"+
    "\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c"+
    "\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\154\0\u0fe4\0\u1008"+
    "\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\154"+
    "\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\7\1\10\1\4\1\11"+
    "\1\12\3\10\1\13\3\10\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\2\10\1\4\1\21\3\10\1\22\1\23"+
    "\1\24\1\25\1\26\1\7\1\4\2\5\1\4\1\5"+
    "\12\4\1\27\1\4\1\5\21\4\1\30\2\4\1\31"+
    "\1\32\1\33\1\7\1\10\1\4\11\10\1\33\7\10"+
    "\1\4\5\10\3\4\1\26\1\7\45\0\2\5\1\0"+
    "\1\5\14\0\1\5\24\0\1\34\46\0\1\7\35\0"+
    "\1\7\5\0\14\10\1\0\15\10\4\0\1\10\5\0"+
    "\4\10\1\35\7\10\1\0\15\10\4\0\1\10\5\0"+
    "\3\10\1\36\6\10\1\37\1\10\1\0\15\10\4\0"+
    "\1\10\5\0\14\10\1\0\3\10\1\40\11\10\4\0"+
    "\1\10\5\0\12\10\1\41\1\10\1\0\15\10\4\0"+
    "\1\10\5\0\7\10\1\42\4\10\1\0\15\10\4\0"+
    "\1\10\5\0\3\10\1\43\1\10\1\44\6\10\1\0"+
    "\3\10\1\45\11\10\4\0\1\10\5\0\14\10\1\0"+
    "\4\10\1\46\10\10\4\0\1\10\5\0\6\10\1\47"+
    "\5\10\1\0\15\10\4\0\1\10\5\0\13\10\1\50"+
    "\1\0\15\10\4\0\1\10\5\0\14\10\1\0\13\10"+
    "\1\51\1\10\4\0\1\10\2\0\1\31\43\0\1\52"+
    "\45\0\1\33\14\0\1\33\27\0\5\10\1\53\6\10"+
    "\1\0\15\10\4\0\1\10\5\0\14\10\1\0\1\10"+
    "\1\54\13\10\4\0\1\10\5\0\7\10\1\55\4\10"+
    "\1\0\15\10\4\0\1\10\5\0\13\10\1\56\1\0"+
    "\15\10\4\0\1\10\5\0\14\10\1\0\3\10\1\57"+
    "\6\10\1\60\2\10\4\0\1\10\5\0\13\10\1\61"+
    "\1\0\15\10\4\0\1\10\5\0\11\10\1\62\2\10"+
    "\1\0\15\10\4\0\1\10\5\0\14\10\1\0\3\10"+
    "\1\63\11\10\4\0\1\10\5\0\13\10\1\64\1\0"+
    "\15\10\4\0\1\10\5\0\6\10\1\65\5\10\1\0"+
    "\15\10\4\0\1\10\5\0\7\10\1\66\4\10\1\0"+
    "\15\10\4\0\1\10\5\0\14\10\1\0\3\10\1\67"+
    "\11\10\4\0\1\10\5\0\6\10\1\70\5\10\1\0"+
    "\15\10\4\0\1\10\5\0\14\10\1\0\2\10\1\71"+
    "\12\10\4\0\1\10\5\0\12\10\1\72\1\10\1\0"+
    "\15\10\4\0\1\10\5\0\14\10\1\0\6\10\1\73"+
    "\6\10\4\0\1\10\5\0\14\10\1\0\13\10\1\74"+
    "\1\10\4\0\1\10\5\0\14\10\1\0\4\10\1\75"+
    "\10\10\4\0\1\10\5\0\14\10\1\0\2\10\1\76"+
    "\12\10\4\0\1\10\5\0\10\10\1\77\3\10\1\0"+
    "\15\10\4\0\1\10\5\0\11\10\1\100\2\10\1\0"+
    "\5\10\1\101\7\10\4\0\1\10\5\0\3\10\1\102"+
    "\10\10\1\0\15\10\4\0\1\10\5\0\14\10\1\0"+
    "\11\10\1\103\3\10\4\0\1\10\5\0\7\10\1\104"+
    "\4\10\1\0\15\10\4\0\1\10\5\0\14\10\1\0"+
    "\12\10\1\105\2\10\4\0\1\10\5\0\14\10\1\106"+
    "\15\10\4\0\1\10\5\0\3\10\1\107\10\10\1\0"+
    "\15\10\4\0\1\10\5\0\5\10\1\110\6\10\1\0"+
    "\15\10\4\0\1\10\5\0\13\10\1\111\1\0\15\10"+
    "\4\0\1\10\5\0\5\10\1\112\6\10\1\0\15\10"+
    "\4\0\1\10\5\0\14\10\1\0\3\10\1\113\11\10"+
    "\4\0\1\10\5\0\14\10\1\0\12\10\1\114\2\10"+
    "\4\0\1\10\5\0\3\10\1\115\10\10\1\0\15\10"+
    "\4\0\1\10\5\0\3\10\1\116\10\10\1\0\15\10"+
    "\4\0\1\10\5\0\12\10\1\117\1\10\1\0\15\10"+
    "\4\0\1\10\11\0\1\120\37\0\6\10\1\121\5\10"+
    "\1\0\15\10\4\0\1\10\5\0\14\10\1\0\3\10"+
    "\1\122\11\10\4\0\1\10\5\0\4\10\1\123\7\10"+
    "\1\0\15\10\4\0\1\10\5\0\12\10\1\124\1\10"+
    "\1\0\15\10\4\0\1\10\5\0\6\10\1\125\5\10"+
    "\1\0\15\10\4\0\1\10\5\0\10\10\1\126\3\10"+
    "\1\0\15\10\4\0\1\10\5\0\14\10\1\0\13\10"+
    "\1\127\1\10\4\0\1\10\10\0\1\130\40\0\14\10"+
    "\1\0\5\10\1\131\7\10\4\0\1\10\5\0\14\10"+
    "\1\0\6\10\1\132\6\10\4\0\1\10\5\0\14\10"+
    "\1\0\4\10\1\133\10\10\4\0\1\10\5\0\14\10"+
    "\1\0\6\10\1\134\6\10\4\0\1\10\5\0\14\10"+
    "\1\0\5\10\1\135\7\10\4\0\1\10\5\0\3\10"+
    "\1\136\10\10\1\0\15\10\4\0\1\10\22\0\1\137"+
    "\26\0\14\10\1\0\3\10\1\140\11\10\4\0\1\10"+
    "\5\0\14\10\1\0\7\10\1\141\5\10\4\0\1\10"+
    "\5\0\14\10\1\0\7\10\1\142\5\10\4\0\1\10"+
    "\5\0\11\10\1\143\2\10\1\0\15\10\4\0\1\10"+
    "\10\0\1\144\40\0\5\10\1\145\6\10\1\0\15\10"+
    "\4\0\1\10\5\0\3\10\1\146\10\10\1\0\15\10"+
    "\4\0\1\10\5\0\14\10\1\0\1\10\1\147\13\10"+
    "\4\0\1\10\5\0\12\10\1\150\1\10\1\0\15\10"+
    "\4\0\1\10\23\0\1\151\25\0\14\10\1\152\15\10"+
    "\4\0\1\10\5\0\4\10\1\153\7\10\1\0\15\10"+
    "\4\0\1\10\5\0\7\10\1\154\4\10\1\0\15\10"+
    "\4\0\1\10\5\0\7\10\1\155\4\10\1\0\15\10"+
    "\4\0\1\10\10\0\1\156\44\0\1\157\37\0\13\10"+
    "\1\160\1\0\15\10\4\0\1\10\5\0\3\10\1\161"+
    "\10\10\1\0\15\10\4\0\1\10\20\0\1\162\33\0"+
    "\1\163\40\0\14\10\1\0\3\10\1\164\11\10\4\0"+
    "\1\10\5\0\13\10\1\165\1\0\15\10\4\0\1\10"+
    "\13\0\1\166\52\0\1\167\26\0\12\10\1\170\1\10"+
    "\1\0\15\10\4\0\1\10\5\0\6\10\1\171\5\10"+
    "\1\0\15\10\4\0\1\10\10\0\1\172\40\0\14\10"+
    "\1\0\5\10\1\173\7\10\4\0\1\10\5\0\14\10"+
    "\1\174\15\10\4\0\1\10\23\0\1\175\25\0\5\10"+
    "\1\176\6\10\1\0\15\10\4\0\1\10\11\0\1\177"+
    "\42\0\1\200\40\0\14\10\1\201\15\10\4\0\1\10"+
    "\10\0\1\202\53\0\1\203\46\0\1\204\42\0\1\205"+
    "\34\0\1\206\42\0\1\207\41\0\1\210\51\0\1\211"+
    "\50\0\1\212\34\0\1\213\37\0\1\214\43\0\1\215"+
    "\53\0\1\216\43\0\1\217\36\0\1\220\43\0\1\221"+
    "\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\16\1\6\11\3\1\1\11\15\1\1\11"+
    "\33\1\1\0\11\1\1\0\7\1\1\0\6\1\1\0"+
    "\4\1\1\0\4\1\2\0\3\1\2\0\2\1\2\0"+
    "\2\1\1\11\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\7\0\1\11\11\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CobolLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CobolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 28: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 29: break;
          case 3: 
            { return SEP;
            } 
            // fall through
          case 30: break;
          case 4: 
            { return INT_VALUE;
            } 
            // fall through
          case 31: break;
          case 5: 
            { return STRING;
            } 
            // fall through
          case 32: break;
          case 6: 
            { return PAREN_OPEN;
            } 
            // fall through
          case 33: break;
          case 7: 
            { return PAREN_CLOSE;
            } 
            // fall through
          case 34: break;
          case 8: 
            { return EQ;
            } 
            // fall through
          case 35: break;
          case 9: 
            { return APOSTROPH;
            } 
            // fall through
          case 36: break;
          case 10: 
            { yybegin(YYINITIAL);return STRING_SPEC;
            } 
            // fall through
          case 37: break;
          case 11: 
            { yybegin(YYINITIAL);return INT_SPEC;
            } 
            // fall through
          case 38: break;
          case 12: 
            { yybegin(YYINITIAL); return SEP;
            } 
            // fall through
          case 39: break;
          case 13: 
            { return BY;
            } 
            // fall through
          case 40: break;
          case 14: 
            { yybegin(PIC_TYPE); return PIC;
            } 
            // fall through
          case 41: break;
          case 15: 
            { return RUN;
            } 
            // fall through
          case 42: break;
          case 16: 
            { return FROM;
            } 
            // fall through
          case 43: break;
          case 17: 
            { return STOP;
            } 
            // fall through
          case 44: break;
          case 18: 
            { return VALUE;
            } 
            // fall through
          case 45: break;
          case 19: 
            { return UNTIL;
            } 
            // fall through
          case 46: break;
          case 20: 
            { yybegin(DISPLAY_TYPE); return DISPLAY;
            } 
            // fall through
          case 47: break;
          case 21: 
            { return VARYING;
            } 
            // fall through
          case 48: break;
          case 22: 
            { return PERFORM;
            } 
            // fall through
          case 49: break;
          case 23: 
            { return PROG_ID;
            } 
            // fall through
          case 50: break;
          case 24: 
            { return DATA_DIV;
            } 
            // fall through
          case 51: break;
          case 25: 
            { return PROC_DIV;
            } 
            // fall through
          case 52: break;
          case 26: 
            { return ID_DIV;
            } 
            // fall through
          case 53: break;
          case 27: 
            { return WS_SEC;
            } 
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
